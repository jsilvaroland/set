{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/javascripts/board.js","webpack:///./src/javascripts/button.js","webpack:///./src/javascripts/card.js","webpack:///./src/javascripts/deck.js","webpack:///./src/javascripts/entry.js","webpack:///./src/javascripts/game.js","webpack:///./src/javascripts/set.js","webpack:///./src/javascripts/util.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA0B;AACI;;AAE9B;AACA,EAAE,gBAAgB;AAClB,EAAE,iBAAiB;AACnB,EAAE,iBAAiB;AACnB,EAAE,gBAAgB;AAClB,EAAE,iBAAiB;AACnB,EAAE,iBAAiB;AACnB,EAAE,gBAAgB;AAClB,EAAE,iBAAiB;AACnB,EAAE,iBAAiB;AACnB,EAAE,gBAAgB;AAClB,EAAE,iBAAiB;AACnB,EAAE;AACF;;AAEA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA,oBAAoB,6CAAI;AACxB,6BAA6B,+CAAM;AACnC,+BAA+B,+CAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,MAAM;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;;AAE3B;AACA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;;AAE3B;AACA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;;AAE3B;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;;AAE3B;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,iBAAiB;;AAEjB;;AAEA;AACA,qBAAqB,uBAAuB;AAC5C;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,KAAK;AACL,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,KAAK;AACL;;AAEA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;;AAElB;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;;AAEA;AACA,WAAW,MAAM;AACjB;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;;AAEA;AACA,WAAW,MAAM;AACjB,SAAS,sBAAsB;;AAE/B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,MAAM;AACjB,WAAW,sBAAsB;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,MAAM;AACjB,WAAW,sBAAsB;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,MAAM;AACjB,WAAW,sBAAsB;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,MAAM;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,E;;;;;;;;;;;;AC9NpB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;ACTrB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,E;;;;;;;;;;;;ACZnB;AAAA;AAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,iCAAiC,MAAM,GAAG,OAAO,GAAG,MAAM;;AAE1D,gBAAgB,6CAAI;AACpB;AACA,KAAK;AACL,IAAI;AACJ,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM,GAAG,OAAO,GAAG,MAAM,GAAG,QAAQ;;AAEtE,iBAAiB,6CAAI;AACrB;AACA,MAAM;AACN,KAAK;AACL,IAAI;AACJ,GAAG;AACH;;AAEA;AACA,SAAS,OAAO;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,mEAAI,E;;;;;;;;;;;;ACnFnB;AAAA;AAAwB;;AAExB;AACA;AACA,oBAAoB,4CAAG;;AAEvB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,CAAC,E;;;;;;;;;;;;ACfD;AAAA;AAAA;AAA4B;AACM;;AAElC;AACA;AACA,mBAAmB,8CAAK;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sDAAQ;AAC3C;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,eAAe;;AAE5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,sBAAsB;;AAEjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;;AAEA;AACA,SAAS,QAAQ;AACjB;AACA,mBAAmB,wBAAwB;AAC3C;AACA,yBAAyB,wBAAwB;AACjD;AACA,2BAA2B,wBAAwB;AACnD;AACA,2CAA2C;AAC3C;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,mEAAI,E;;;;;;;;;;;;ACtUnB;AAAA;AAA0B;;AAE1B;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,6CAAI;AACxB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,6CAAI;AACxB;;AAEA;AACA;;AAEA;AACA;;AAEe,kEAAG,E;;;;;;;;;;;;AChClB;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/javascripts/entry.js\");\n","import Deck from './deck';\nimport Button from './button';\n\nconst CARD_COORDS = [\n\t{ x: 50, y: 100 },\n\t{ x: 262, y: 100 },\n\t{ x: 474, y: 100 },\n\t{ x: 50, y: 252 },\n\t{ x: 262, y: 252 },\n\t{ x: 474, y: 252 },\n\t{ x: 50, y: 404 },\n\t{ x: 262, y: 404 },\n\t{ x: 474, y: 404 },\n\t{ x: 50, y: 557 },\n\t{ x: 262, y: 557 },\n\t{ x: 474, y: 557 }\n];\n\nclass Board {\n  constructor(ctx, canvas, difficulty) {\n    this.ctx = ctx;\n    this.dimensions = { width: canvas.width, height: canvas.height };\n\n    this.board = [];\n    this.deck = new Deck(difficulty);\n    this.findSetButton = new Button(400, 15, 106, 35);\n    this.add3CardsButton = new Button(528, 15, 141, 35);\n    this.resetCanvas();\n    this.initialDisplayCards();\n    this.displayDeckCount();\n    this.displaySetsFound(0);\n    this.displayFindSet();\n    this.displayAdd3Cards();\n  }\n\n  resetCanvas() {\n    this.ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\n  }\n\n  drawRoundedRect(x, y, w, h, stroke, fill, borderRad = 10, lineWidth = 3) {\n    const { ctx } = this;\n\n    ctx.beginPath();\n    ctx.moveTo(x + borderRad, y);\n    ctx.lineTo(x + w - borderRad, y);\n    ctx.quadraticCurveTo(x + w, y, x + w, y + borderRad);\n    ctx.lineTo(x + w, y + h - borderRad);\n    ctx.quadraticCurveTo(x + w, y + h, x + w - borderRad, y + h);\n    ctx.lineTo(x + borderRad, y + h);\n    ctx.quadraticCurveTo(x, y + h, x, y + h - borderRad);\n    ctx.lineTo(x, y + borderRad);\n    ctx.quadraticCurveTo(x, y, x + borderRad, y);\n    ctx.strokeStyle = stroke;\n    ctx.fillStyle = fill;\n    ctx.lineWidth = lineWidth;\n    this.ctx.stroke();\n    this.ctx.fill();\n  }\n\n  clearCardArea(x, y) {\n    this.ctx.clearRect(x - 3, y - 3, 197 + 3, 137 + 3);\n  }\n\n  removeCard(card) {\n    const i = this.board.indexOf(card);\n    delete this.board[i];\n  }\n\n  highlight(card) {\n    const { x, y } = card.pos;\n    const { width, height } = card.card;\n\n    this.clearCardArea(x, y);\n    this.drawRoundedRect(x, y, width, height, \"#959595\", \"#DDEFFE\");\n    this.drawCardImage(card.card, card.pos);\n  }\n\n  highlightSet(card) {\n    const { x, y } = card.pos;\n    const { width, height } = card.card;\n\n    this.clearCardArea(x, y);\n    this.drawRoundedRect(x, y, width, height, \"#959595\", \"#DDFEDF\");\n    this.drawCardImage(card.card, card.pos);\n  }\n\n  unhighlight(card) {\n    const { x, y } = card.pos;\n    const { width, height } = card.card;\n\n    this.drawRoundedRect(x, y, width, height, \"#959595\", \"#FFFFFF\");\n    this.drawCardImage(card.card, card.pos);\n  }\n\n  errorHighlight(card) {\n    const { x, y } = card.pos;\n    const { width, height } = card.card;\n\n    this.clearCardArea(x, y);\n    this.drawRoundedRect(x, y, width, height, \"#959595\", \"#FEDDDF\");\n    this.drawCardImage(card.card, card.pos);\n  }\n\n  displayCard(x, y) {\n    const card = this.deck.deal();\n    const { width, height } = card;\n    const pos = { x, y };\n\n    this.drawRoundedRect(x, y, width, height, \"#959595\", \"#FFFFFF\");\n\n    if (this.board.includes(undefined)) {\n      for (let i = 0; i < this.board.length; i++) {\n        if (typeof this.board[i] == \"undefined\") {\n          this.board[i] = { pos, card };\n        }\n      }\n      this.drawCardImage(card, pos);\n    } else {\n      this.board.push({ pos, card });\n      card.image.onload = () => {\n        this.drawCardImage(card, pos);\n      };\n    }\n\n    // card.image.onload = () => {\n    // \tthis.drawCardImage(card, pos);\n    // };\n  }\n\n  drawCardImage(card, pos) {\n    this.ctx.drawImage(card.image, pos.x + 28, pos.y + 25);\n  }\n\n  initialDisplayCards() {\n    // displays all 12 cards\n    CARD_COORDS.forEach((coords) => {\n      const { x, y } = coords;\n      this.displayCard(x, y);\n    });\n  }\n\n  displayDeckCount() {\n    const { ctx } = this;\n    const { deck } = this.deck;\n\n    this.ctx.clearRect(0, 0, 160, 50);\n    ctx.font = \"20px Arial\";\n    ctx.fillStyle = \"#000000\";\n    this.ctx.fillText(`Deck: ${deck.length}`, 50, 40);\n    ctx.fillStyle = \"#FFFFFF\";\n  }\n\n  displaySetsFound(setsFound) {\n    const { ctx } = this;\n    this.ctx.clearRect(160, 0, 160, 50);\n    ctx.fillStyle = \"#000000\";\n    this.ctx.fillText(`Sets Found: ${setsFound}`, 165, 40);\n    ctx.fillStyle = \"#FFFFFF\";\n  }\n\n  displayFindSet() {\n    const { ctx } = this;\n\t\tconst { x, y, width, height } = this.findSetButton;\n\n\t\tthis.ctx.clearRect(x - 2, y - 2, width + 5, height + 5);\n    this.drawRoundedRect(x, y, width, height, \"#959595\", \"#FFFFFF\");\n\n    ctx.fillStyle = \"#000000\";\n    this.ctx.fillText(`Find Set`, x + 15, y + 25);\n    ctx.fillStyle = \"#FFFFFF\";\n  }\n\n  highlightFindSet() {\n    const { ctx } = this;\n    const { x, y, width, height } = this.findSetButton;\n\n\t\tthis.ctx.clearRect(x - 2, y - 2, width + 5, height + 5);\n    this.drawRoundedRect(x, y, width, height, \"#959595\", \"#DDEFFE\");\n\n    ctx.fillStyle = \"#000000\";\n    this.ctx.fillText(`Find Set`, x + 15, y + 25);\n    ctx.fillStyle = \"#FFFFFF\";\n  }\n\n  displayAdd3Cards() {\n    const { ctx } = this;\n    const { x, y, width, height } = this.add3CardsButton;\n\n\t\tthis.ctx.clearRect(x - 5, y - 5, width + 5, height + 5);\n    this.drawRoundedRect(x, y, width, height, \"#959595\", \"#FFFFFF\");\n\n    ctx.fillStyle = \"#000000\";\n    this.ctx.fillText(`Add 3 Cards`, x + 15, y + 25);\n    ctx.fillStyle = \"#FFFFFF\";\n  }\n\n  highlightAdd3Cards() {\n    const { ctx } = this;\n    const { x, y, width, height } = this.add3CardsButton;\n\n\t\tthis.ctx.clearRect(x - 5, y - 5, width + 5, height + 5);\n    this.drawRoundedRect(x, y, width, height, \"#959595\", \"#DDEFFE\");\n\n    ctx.fillStyle = \"#000000\";\n    this.ctx.fillText(`Add 3 Cards`, x + 15, y + 25);\n    ctx.fillStyle = \"#FFFFFF\";\n  }\n\n  drawWin() {\n    const { ctx } = this;\n\n\t\tthis.drawRoundedRect(165 - 73, 400 - 48 - 73, 389 + (73 * 2), 73 + (48 * 2), \"#959595\", \"#FFFFFF\", 30, 5);\n\n\t\tctx.font = \"100px Arial\";\n    ctx.fillStyle = \"#000000\";\n    this.ctx.fillText(`You Win!`, 165, 400);\n\t\t// change these coordinates later\n\t\tctx.font = \"20px Arial\";\n    ctx.fillStyle = \"#FFFFFF\";\n  }\n}\n\nexport default Board;","class Button {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n}\n\nexport default Button;","class Card {\n    constructor(color, number, shape, shading, image) {\n        this.color = color;\n        this.number = number;\n        this.shape = shape;\n        this.shading = shading;\n        this.image = image;\n        this.width = 195;\n        this.height = 135;\n    }\n}\n\nexport default Card;","import Card from './card';\n\nconst ATTRIBUTES = {\n\tcolors: ['red', 'green', 'purple'],\n\tnumbers: ['one', 'two', 'three'],\n\tshapes: ['oval', 'squiggle', 'diamond'],\n\tshadings: ['solid', 'striped', 'open'],\n};\n\nclass Deck {\n\tconstructor(difficulty) {\n\t\tif (difficulty === 'expert') {\n\t\t\tthis.resetDeckExpert(); // for now deck will be made in constructor, once novice mode is introduced, resetDeck will be removed from constructor and will have to be called depending on button push\n\t\t} else {\n\t\t\tthis.resetDeckNovice();\n\t\t}\n\t}\n\n\trepopulateDeckNovice() {\n\t// empties deck if not already empty\n\t\tthis.deck = [];\n\t\tlet image, card;\n\t\tlet shading = { shading: 'solid' };\n\n\t\tATTRIBUTES.colors.forEach(color => {\n\t\t\tATTRIBUTES.numbers.forEach(number => {\n\t\t\t\tATTRIBUTES.shapes.forEach(shape => {\n\t\t\t\t\timage = new Image();\n\t\t\t\t\timage.src = `./src/assets/${color}-${number}-${shape}-solid.png`;\n\n\t\t\t\t\tcard = new Card(color, number, shape, shading, image);\n\t\t\t\t\tthis.deck.push(card);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\trepopulateDeckExpert() {\n\t\t// empties deck if not already empty\n\t\tthis.deck = [];\n\t\tlet image, card;\n\n\t\tATTRIBUTES.colors.forEach(color => {\n\t\t\tATTRIBUTES.numbers.forEach(number => {\n\t\t\t\tATTRIBUTES.shapes.forEach(shape => {\n\t\t\t\t\tATTRIBUTES.shadings.forEach(shading => {\n\t\t\t\t\t\timage = new Image();\n\t\t\t\t\t\timage.src = `./src/assets/${color}-${number}-${shape}-${shading}.png`;\n\n\t\t\t\t\t\tcard = new Card(color, number, shape, shading, image);\n\t\t\t\t\t\tthis.deck.push(card);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tshuffle() {\n\t\tconst { deck } = this;\n\t\tlet count = deck.length;\n\t\tlet i;\n\n\t\twhile (count) {\n\t\t\ti = Math.floor(Math.random() * count--);\n\t\t\t[deck[count], deck[i]] = [deck[i], deck[count]];\n\t\t}\n\t}\n\n\tresetDeckNovice() {\n\t\tthis.repopulateDeckNovice();\n\t\tthis.shuffle();\n\t}\n\n\tresetDeckExpert() {\n\t\tthis.repopulateDeckExpert();\n\t\tthis.shuffle();\n\t}\n\n\tdeal() {\n\t\treturn this.deck.pop();\n\t}\n}\n\nexport default Deck;","import Set from './set';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const canvas = document.getElementById(\"set-game\");\n    const set = new Set(canvas);\n    \n    const newGameNovice = document.getElementById(\"new-game-novice\");\n    newGameNovice.addEventListener(\"click\", () => {\n      set.newGameNovice();\n    });\n\n    const newGameExpert = document.getElementById(\"new-game-expert\");\n    newGameExpert.addEventListener(\"click\", () => {\n      set.newGameExpert();\n    });\n});","import Board from './board';\nimport { throttle } from './util';\n\nclass Game {\n  constructor(ctx, canvas, difficulty) {\n\t\tthis.board = new Board(ctx, canvas, difficulty);\n\t\tthis.canvas = canvas;\n    this.clickedCards = [];\n    this.setOnBoard = [];\n    this.setsFound = 0;\n    this.difficulty = difficulty;\n  }\n\n  addGameEventListeners(canvas) {\n    this.clickCallback = (e) => this.handleClick(e);\n    this.mousedownCallback = (e) => this.handleMousedown(e);\n    this.mouseupCallback = (e) => this.handleMouseup(e);\n    canvas.addEventListener(\"click\", this.clickCallback);\n\t\tcanvas.addEventListener(\"click\", throttle(e => {\n\t\t\tthis.handleButtonClick(e);\n\t\t}, 1000));\n    canvas.addEventListener(\"mousedown\", this.mousedownCallback);\n    canvas.addEventListener(\"mouseup\", this.mouseupCallback);\n  }\n\n  removeGameEventListeners(canvas) {\n    canvas.removeEventListener(\"click\", this.clickCallback);\n    canvas.removeEventListener(\"click\", this.buttonClickCallback);\n    canvas.removeEventListener(\"mousedown\", this.mousedownCallback);\n    canvas.removeEventListener(\"mouseup\", this.mouseupCallback);\n  }\n\n  handleMousedown(e) {\n    const mousedownPos = { x: e.layerX, y: e.layerY };\n\n    if (\n      mousedownPos.x >= 400 &&\n      mousedownPos.x < 400 + 108 &&\n      mousedownPos.y >= 15 &&\n      mousedownPos.y < 15 + 37\n    ) {\n      this.board.highlightFindSet();\n    } else if (\n      mousedownPos.x >= 528 &&\n      mousedownPos.x < 528 + 143 &&\n      mousedownPos.y >= 15 &&\n      mousedownPos.y < 15 + 37\n    ) {\n      this.board.highlightAdd3Cards();\n    }\n  }\n\n  handleMouseup(e) {\n    const mouseupPos = { x: e.layerX, y: e.layerY };\n\n    if (\n      mouseupPos.x >= 400 &&\n      mouseupPos.x < 400 + 108 &&\n      mouseupPos.y >= 15 &&\n      mouseupPos.y < 15 + 37\n    ) {\n\t\t\tthis.board.displayFindSet();\n    } else if (\n      mouseupPos.x >= 528 &&\n      mouseupPos.x < 528 + 143 &&\n      mouseupPos.y >= 15 &&\n      mouseupPos.y < 15 + 37\n    ) {\n      this.board.displayAdd3Cards();\n    }\n  }\n\n  handleClick(e) {\n    const clickPos = { x: e.layerX, y: e.layerY };\n    const clickedCard = this.findClickedCard(clickPos);\n\n    if (clickedCard) {\n      // if a card was clicked\n      if (this.clickedCards.includes(clickedCard)) {\n        // if card has already been clicked\n        this.clickedCards = this.clickedCards.filter(\n          (card) => card !== clickedCard\n        );\n        this.board.unhighlight(clickedCard);\n      } else {\n        this.clickedCards.push(clickedCard);\n        this.board.highlight(clickedCard);\n      }\n      this.checkClickedCards();\n    }\n    console.log(this.clickedCards);\n  }\n\n  handleButtonClick(e) {\n    // finds the button that was clicked\n    const clickPos = { x: e.layerX, y: e.layerY };\n\n    if (\n      clickPos.x >= 400 &&\n      clickPos.x < 400 + 108 &&\n      clickPos.y >= 15 &&\n      clickPos.y < 15 + 37\n    ) {\n      this.handleClickFindSet();\n    } else if (\n      clickPos.x >= 528 &&\n      clickPos.x < 528 + 143 &&\n      clickPos.y >= 15 &&\n      clickPos.y < 15 + 37\n    ) {\n      this.handleClickAdd3Cards();\n    }\n  }\n\n  handleClickFindSet() {\n    if (this.anySetsOnBoard(this.board, this.isSet)) {\n      // call set found with a setTimeout\n      console.log(this.setOnBoard);\n\n      this.clickedCards.forEach((card) => {\n        this.board.unhighlight(card);\n      });\n\n      this.setOnBoard.forEach((card) => {\n        this.board.highlightSet(card);\n      });\n\n      this.clickedCards[0] = this.setOnBoard[0];\n      this.clickedCards[1] = this.setOnBoard[1];\n      this.clickedCards[2] = this.setOnBoard[2];\n\n      this.setFound();\n    } else {\n      console.log(\"no sets on the board\");\n      //console.log('3 cards added');\n      // no sets on board, 3 cards added.\n      // this.board.displayExtraCards\n      // add a cap to this at 18\n    }\n  }\n\n  handleClickAdd3Cards() {\n    console.log(\"add 3 cards\");\n  }\n\n  findClickedCard(clickPos) {\n    const { board } = this.board;\n\n    return board.find((card) => {\n      if (card) {\n        return (\n          clickPos.x >= card.pos.x &&\n          clickPos.x < card.pos.x + 197 &&\n          clickPos.y >= card.pos.y &&\n          clickPos.y < card.pos.y + 137\n        );\n      }\n    });\n  }\n\n  checkClickedCards() {\n    if (this.clickedCards.length === 3) {\n      const { clickedCards } = this;\n\n      if (this.isSet(clickedCards[0], clickedCards[1], clickedCards[2])) {\n        clickedCards.forEach((card) => {\n          this.board.highlightSet(card);\n          //display message \"SET FOUND\"\n        });\n        this.setFound();\n      } else {\n        this.notASet();\n      }\n      this.clickedCards = [];\n    }\n  }\n\n  setFound() {\n    const { clickedCards, board } = this;\n    this.clickedCards = [];\n    this.setsOnBoard = [];\n\t\tconsole.log(\"is a set!\");\n\t\tthis.setsFound++;\n\t\tboard.displaySetsFound(this.setsFound);\n    setTimeout(function () {\n      let cardPosX, cardPosY;\n      clickedCards.forEach((card) => {\n        cardPosX = card.pos.x;\n        cardPosY = card.pos.y;\n        board.clearCardArea(cardPosX, cardPosY);\n        board.removeCard(card);\n        // if deck has cards left, displayCard\n        if (board.deck.deck.length) {\n          board.displayCard(cardPosX, cardPosY);\n        }\n      });\n      console.log(board.board);\n      board.displayDeckCount();\n      if (\n        this.isBoardEmpty.call(this) ||\n        (this.isDeckEmpty.call(this) && !this.anySetsOnBoard.call(this))\n      ) {\n        this.win.call(this);\n      }\n\t\t}.bind(this), 250);\n  }\n\n  isDeckEmpty() {\n    return !this.board.deck.deck.length;\n  }\n\n  isBoardEmpty() {\n    return !this.board.board.some((card) => card);\n  }\n\n  notASet() {\n    const { board, clickedCards } = this;\n\n    clickedCards.forEach((card) => {\n      this.board.errorHighlight(card);\n      //display message \"NOT A SET\"\n    });\n    setTimeout(function () {\n      clickedCards.forEach((card) => {\n        board.unhighlight(card);\n        // unhighlight THE 3 CARDS, display message \"NOT A SET\"\n      });\n    }, 250);\n    // add 30 seconds to timer\n  }\n\n  isSet(card1, card2, card3) {\n    let colorReq = false;\n    let numberReq = false;\n    let shapeReq = false;\n    let shadingReq = false;\n\n    // color req\n    if (\n      card1.card.color === card2.card.color &&\n      card2.card.color === card3.card.color\n    ) {\n      colorReq = true;\n    } else if (\n      card1.card.color !== card2.card.color &&\n      card1.card.color !== card3.card.color &&\n      card2.card.color !== card3.card.color\n    ) {\n      colorReq = true;\n    }\n\n    // number req\n    if (\n      card1.card.number === card2.card.number &&\n      card2.card.number === card3.card.number\n    ) {\n      numberReq = true;\n    } else if (\n      card1.card.number !== card2.card.number &&\n      card1.card.number !== card3.card.number &&\n      card2.card.number !== card3.card.number\n    ) {\n      numberReq = true;\n    }\n\n    // shape req\n    if (\n      card1.card.shape === card2.card.shape &&\n      card2.card.shape === card3.card.shape\n    ) {\n      shapeReq = true;\n    } else if (\n      card1.card.shape !== card2.card.shape &&\n      card1.card.shape !== card3.card.shape &&\n      card2.card.shape !== card3.card.shape\n    ) {\n      shapeReq = true;\n    }\n\n    // shading req\n    if (\n      card1.card.shading === card2.card.shading &&\n      card2.card.shading === card3.card.shading\n    ) {\n      shadingReq = true;\n    } else if (\n      card1.card.shading !== card2.card.shading &&\n      card1.card.shading !== card3.card.shading &&\n      card2.card.shading !== card3.card.shading\n    ) {\n      shadingReq = true;\n    }\n\n    return colorReq && numberReq && shapeReq && shadingReq; // returns true if it's a set\n  }\n\n  anySetsOnBoard() {\n\t\tconst { board } = this;\n    // iterate through board, all combinations of 3 cards\n    for (let i = 0; i < board.board.length; i++) {\n      const card1 = board.board[i];\n      for (let j = i + 1; j < board.board.length; j++) {\n        const card2 = board.board[j];\n        for (let k = j + 1; k < board.board.length; k++) {\n          const card3 = board.board[k];\n          if (!card1 || !card2 || !card3) { // if the spot on the board is empty\n            continue;\n          } else if (this.isSet(card1, card2, card3)) {\n            this.setOnBoard = [card1, card2, card3];\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  increaseTimer() {\n    // increases timer, likely will call within newGame\n  }\n\n  win() {\n\t\tthis.board.drawWin();\n  }\n}\n\nexport default Game;","import Game from './game';\n\nclass Set {\n  constructor(canvas) {\n    this.ctx = canvas.getContext(\"2d\");\n    this.canvas = canvas;\n    this.dimensions = { width: canvas.width, height: canvas.height };\n  }\n\n  newGameExpert() {\n    if (this.game) {\n      this.game.removeGameEventListeners(this.canvas);\n    }\n    this.game = new Game(this.ctx, this.canvas, 'expert');\n    this.game.addGameEventListeners(this.canvas);\n\n    // remove menu onClicks\n  }\n\n  newGameNovice() {\n    if (this.game) {\n      this.game.removeGameEventListeners(this.canvas);\n    }\n    this.game = new Game(this.ctx, this.canvas, 'novice');\n    this.game.addGameEventListeners(this.canvas);\n\n    // remove menu onClicks\n  }\n\n  // menu stuff will go here later on\n}\n\nexport default Set;","export const throttle = (func, limit) => {\n  let inThrottle;\n  return function () {\n    const args = arguments, context = this;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n};\n"],"sourceRoot":""}